// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// get_nb_cpp
NumericVector get_nb_cpp(NumericVector mu, double count, NumericVector size);
RcppExport SEXP _ACER_get_nb_cpp(SEXP muSEXP, SEXP countSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type count(countSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_nb_cpp(mu, count, size));
    return rcpp_result_gen;
END_RCPP
}
// get_pois_countVec
NumericVector get_pois_countVec(NumericVector count_vector, double mu);
RcppExport SEXP _ACER_get_pois_countVec(SEXP count_vectorSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type count_vector(count_vectorSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(get_pois_countVec(count_vector, mu));
    return rcpp_result_gen;
END_RCPP
}
// get_pois_muVec
NumericVector get_pois_muVec(double count, NumericVector mu_vector);
RcppExport SEXP _ACER_get_pois_muVec(SEXP countSEXP, SEXP mu_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type count(countSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_vector(mu_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(get_pois_muVec(count, mu_vector));
    return rcpp_result_gen;
END_RCPP
}
// get_norm_countVec
NumericVector get_norm_countVec(NumericVector count_vector, double mu, double var);
RcppExport SEXP _ACER_get_norm_countVec(SEXP count_vectorSEXP, SEXP muSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type count_vector(count_vectorSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(get_norm_countVec(count_vector, mu, var));
    return rcpp_result_gen;
END_RCPP
}
// getLL
double getLL(NumericVector gene_essentiality, NumericVector guide_efficiency, NumericVector sample_effects, NumericMatrix init_counts, NumericMatrix dep_counts, int var_model, NumericMatrix master_freq, NumericVector masterlib_key, NumericVector cells_infected, NumericVector init_scaling, NumericVector dep_scaling, NumericVector nsg_vals, NumericVector var_params, int step_size);
RcppExport SEXP _ACER_getLL(SEXP gene_essentialitySEXP, SEXP guide_efficiencySEXP, SEXP sample_effectsSEXP, SEXP init_countsSEXP, SEXP dep_countsSEXP, SEXP var_modelSEXP, SEXP master_freqSEXP, SEXP masterlib_keySEXP, SEXP cells_infectedSEXP, SEXP init_scalingSEXP, SEXP dep_scalingSEXP, SEXP nsg_valsSEXP, SEXP var_paramsSEXP, SEXP step_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type gene_essentiality(gene_essentialitySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type guide_efficiency(guide_efficiencySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sample_effects(sample_effectsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type init_counts(init_countsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dep_counts(dep_countsSEXP);
    Rcpp::traits::input_parameter< int >::type var_model(var_modelSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type master_freq(master_freqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type masterlib_key(masterlib_keySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cells_infected(cells_infectedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init_scaling(init_scalingSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dep_scaling(dep_scalingSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nsg_vals(nsg_valsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_params(var_paramsSEXP);
    Rcpp::traits::input_parameter< int >::type step_size(step_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(getLL(gene_essentiality, guide_efficiency, sample_effects, init_counts, dep_counts, var_model, master_freq, masterlib_key, cells_infected, init_scaling, dep_scaling, nsg_vals, var_params, step_size));
    return rcpp_result_gen;
END_RCPP
}
// getLLNoInit
double getLLNoInit(NumericVector gene_essentiality, NumericVector guide_efficiency, NumericVector sample_effects, NumericMatrix dep_counts, int var_model, NumericMatrix master_freq, NumericVector masterlib_key, NumericVector cells_infected, NumericVector dep_scaling, NumericVector nsg_vals, NumericVector var_params, int step_size);
RcppExport SEXP _ACER_getLLNoInit(SEXP gene_essentialitySEXP, SEXP guide_efficiencySEXP, SEXP sample_effectsSEXP, SEXP dep_countsSEXP, SEXP var_modelSEXP, SEXP master_freqSEXP, SEXP masterlib_keySEXP, SEXP cells_infectedSEXP, SEXP dep_scalingSEXP, SEXP nsg_valsSEXP, SEXP var_paramsSEXP, SEXP step_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type gene_essentiality(gene_essentialitySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type guide_efficiency(guide_efficiencySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sample_effects(sample_effectsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dep_counts(dep_countsSEXP);
    Rcpp::traits::input_parameter< int >::type var_model(var_modelSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type master_freq(master_freqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type masterlib_key(masterlib_keySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cells_infected(cells_infectedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dep_scaling(dep_scalingSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nsg_vals(nsg_valsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_params(var_paramsSEXP);
    Rcpp::traits::input_parameter< int >::type step_size(step_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(getLLNoInit(gene_essentiality, guide_efficiency, sample_effects, dep_counts, var_model, master_freq, masterlib_key, cells_infected, dep_scaling, nsg_vals, var_params, step_size));
    return rcpp_result_gen;
END_RCPP
}
// getLLNoMaster
double getLLNoMaster(NumericVector gene_essentiality, NumericVector guide_efficiency, NumericVector sample_effects, NumericMatrix init_counts, NumericMatrix dep_counts, int var_model, NumericVector init_scaling, NumericVector dep_scaling, NumericVector nsg_vals, NumericVector var_params, int step_size);
RcppExport SEXP _ACER_getLLNoMaster(SEXP gene_essentialitySEXP, SEXP guide_efficiencySEXP, SEXP sample_effectsSEXP, SEXP init_countsSEXP, SEXP dep_countsSEXP, SEXP var_modelSEXP, SEXP init_scalingSEXP, SEXP dep_scalingSEXP, SEXP nsg_valsSEXP, SEXP var_paramsSEXP, SEXP step_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type gene_essentiality(gene_essentialitySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type guide_efficiency(guide_efficiencySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sample_effects(sample_effectsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type init_counts(init_countsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dep_counts(dep_countsSEXP);
    Rcpp::traits::input_parameter< int >::type var_model(var_modelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init_scaling(init_scalingSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dep_scaling(dep_scalingSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nsg_vals(nsg_valsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_params(var_paramsSEXP);
    Rcpp::traits::input_parameter< int >::type step_size(step_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(getLLNoMaster(gene_essentiality, guide_efficiency, sample_effects, init_counts, dep_counts, var_model, init_scaling, dep_scaling, nsg_vals, var_params, step_size));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ACER_get_nb_cpp", (DL_FUNC) &_ACER_get_nb_cpp, 3},
    {"_ACER_get_pois_countVec", (DL_FUNC) &_ACER_get_pois_countVec, 2},
    {"_ACER_get_pois_muVec", (DL_FUNC) &_ACER_get_pois_muVec, 2},
    {"_ACER_get_norm_countVec", (DL_FUNC) &_ACER_get_norm_countVec, 3},
    {"_ACER_getLL", (DL_FUNC) &_ACER_getLL, 14},
    {"_ACER_getLLNoInit", (DL_FUNC) &_ACER_getLLNoInit, 12},
    {"_ACER_getLLNoMaster", (DL_FUNC) &_ACER_getLLNoMaster, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_ACER(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
